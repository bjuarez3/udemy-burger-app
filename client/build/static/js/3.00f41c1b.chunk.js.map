{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","inputtype","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","Input","classzname","Label","label","module","exports","Auth","ContactData","state","controls","email","elementType","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","componentDidMount","_this","buldingBurger","authRedirectPath","onSetAuthRedirectPath","inputChangedHandler","event","controlName","updatedControls","updateObject","_Users_benjaminjuarez_Udemy_React_client_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","_this2","this","formElementsArray","key","id","config","form","map","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.00f41c1b.chunk.js","sourcesContent":["import React from 'react'\n\nimport classes from './Input.css'\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement]\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch(props.inputtype) {\n        case('input') : \n            inputElement = <input \n                            className = {inputClasses.join(' ')} \n                            {...props.elementConfig} \n                            value = {props.value}\n                            onChange = {props.changed}/>\n            break\n        case('textarea') : \n            inputElement = <textarea \n                            className = {inputClasses.join(' ')} \n                            {...props.elementConfig} \n                            value = {props.value}\n                            onChange = {props.changed}/>\n            break\n        default: \n            inputElement = <input \n                            className = {inputClasses.join(' ')} \n                            {...props.elementConfig} \n                            value = {props.value}\n                            onChange = {props.changed}/>\n        \n    }\n    return (\n        <div className = {classes.Input}>\n            <label classzname = {classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n    \n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\",\"ContactData\":\"Auth__ContactData__1Fuu3\"};","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\n\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.css'\n\nimport * as actions from '../../store/actions/index'\nimport {updateObject, checkValidity} from '../../shared/utility'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'passwrod',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount = () => {\n        if(!this.props.buldingBurger && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirectPath()\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls,{\n            [controlName]: updateObject(this.state.controls[controlName] , {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        }) \n        this.setState({\n            controls: updatedControls\n        })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {\n                isSignup: !prevState.isSignup\n            }\n        })\n    }\n\n    render() {\n        const formElementsArray = []\n        for(let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n        let form = formElementsArray.map((formElement) => (\n            <Input \n                key = {formElement.id}\n                elementType = {formElement.config.elementType}\n                elementConfig = {formElement.config.elementConfig}\n                value = {formElement.config.value}\n                invalid = {!formElement.config.valid}\n                shouldValidate = {formElement.config.validation}\n                touched = {formElement.config.touched}\n                changed = {(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n        ))\n\n        if(this.props.loading){\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n        if(this.props.error){\n            errorMessage = (\n                <p>{this.props.error}</p>\n            )\n        }\n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to = {this.props.authRedirectPath} />\n        }\n        return (\n            <div className = {classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit = {this.submitHandler}>\n                    {form}\n                    <Button btnType = \"Success\">SUBMIT</Button>\n                </form>\n                <Button\n                    clicked = {this.switchAuthModeHandler} \n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNUP' : 'SIGNIN'}</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buldingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirect('/'))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)"],"sourceRoot":""}